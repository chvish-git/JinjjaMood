rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - proper access control for user profiles
    match /users/{userId} {
      // Allow reading own profile - compare auth.uid with document ID
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow creating own profile during registration
      allow create: if request.auth != null && 
                    request.auth.uid == userId &&
                    request.resource.data.username is string &&
                    request.resource.data.username.size() >= 2 &&
                    request.resource.data.username.size() <= 20 &&
                    request.resource.data.username.matches('^[a-z0-9_]+$') &&
                    request.resource.data.name is string &&
                    request.resource.data.password is string &&
                    request.resource.data.createdAt != null;
      
      // Allow updating own profile
      allow update: if request.auth != null && 
                    request.auth.uid == userId &&
                    request.resource.data.username is string &&
                    request.resource.data.username.size() >= 2 &&
                    request.resource.data.username.size() <= 20 &&
                    request.resource.data.username.matches('^[a-z0-9_]+$') &&
                    request.resource.data.name is string &&
                    request.resource.data.password is string;
      
      // Allow deleting own profile OR deleting old profile during migration
      allow delete: if request.auth != null && 
                    (request.auth.uid == userId ||
                     (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == resource.data.username));
    }
    
    // Allow listing users collection for username uniqueness checks
    match /users {
      allow list: if request.auth != null;
    }
    
    // Mood logs collection - secure per-user access with expanded mood validation
    match /moodLogs/{logId} {
      // Allow reading individual mood log documents (get operations)
      allow get: if request.auth != null && 
                 resource.data.uid == request.auth.uid;
      
      // Allow listing mood logs only when querying by user's own uid
      allow list: if request.auth != null && 
                  request.auth.uid in resource.data.uid;
      
      // Allow writing only own mood logs with validation for new expanded moods
      allow write: if request.auth != null && 
                   request.resource.data.uid == request.auth.uid &&
                   request.resource.data.mood is string &&
                   request.resource.data.mood in [
                     // Positive moods
                     'joyful', 'productive', 'calm', 'grateful', 'energized', 'confident',
                     // Neutral moods
                     'meh', 'blank', 'tired', 'chill', 'focused', 'neutral',
                     // Negative moods
                     'anxious', 'angry', 'stressed', 'low energy', 'overwhelmed', 'sad',
                     // Bonus moods
                     'ungovernable', 'CEO mode', 'fluff cloud', 'main character', 'chaos gremlin', 'soft launch'
                   ] &&
                   request.resource.data.moodType is string &&
                   request.resource.data.moodType in ['positive', 'neutral', 'negative', 'bonus'] &&
                   request.resource.data.journalEntry is string &&
                   request.resource.data.timestamp != null &&
                   request.resource.data.day is string &&
                   request.resource.data.hour is number &&
                   request.resource.data.hour >= 0 &&
                   request.resource.data.hour <= 23;
    }
  }
}